<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN" "http://java.sun.com/dtd/web-app_2_3.dtd">
<web-app>
	<filter id="bridge">
		<filter-name>equinoxbridgefilter</filter-name>
		<filter-class>org.jabylon.war.JabylonFilter</filter-class>

		<!-- NEW PARAMETERS -->

		<!-- workspace_loc: When osgi.bundles from "config.ini" use ${workspace_loc} 
			wildcard to reference bundles from workspace, the Eclipse workspace path 
			must be used. Fill the Eclipse workspace path if Bridge Servlet is not deployed 
			into the ".metadata" Eclipse workspace. For instance if you are using WTP 
			DynamicWebProject : * if Bridge webapp is added with "Add Web Module...", 
			the webapp is deployed at ".metdata" folder. No need to use workspace_loc 
			init-param. * if Bridge webapp is added with "Add External Web Module...", 
			the webapp is NOT deployed at ".metdata" folder. The Eclipse workspace must 
			be filled like this : <init-param> <param-name>workspace_loc</param-name> 
			<param-value>C:\myworkspace</param-value> </init-param> -->

		<!-- bundleClassPathEntries: When osgi.bundles from config.ini, use ${workspace_loc} 
			or reference\:file:\..., classpath must be added for each bundles. It's doen 
			with dev.properties file which is generated. By default "bin" folder is used. 
			If you wish custom classpath, you can use bundleClassPathEntries. <init-param> 
			<param-name>bundleClassPathEntries</param-name> <param-value>bin,classes</param-value> 
			</init-param> -->

		<!-- OLD PARAMETERS -->
		<init-param>
			<param-name>commandline</param-name>
			<param-value>-console</param-value>
		</init-param>
		<init-param>
			<param-name>enableFrameworkControls</param-name>
			<param-value>true</param-value>
		</init-param>
		<!-- org.eclipse.equinox.servletbridge and the Servlet API are exported 
			automatically to the underlying OSGi framework. The extendedFrameworkExports 
			parameter allows the specification of additional java package exports. The 
			format is a comma separated list of exports as specified by the "Export-Package" 
			bundle manifest header. For example: com.mycompany.exports; version=1.0.0, 
			com.mycompany.otherexports; version=1.0.0 -->
		<init-param>
			<param-name>extendedFrameworkExports</param-name>
			<param-value></param-value>
		</init-param>
	</filter>


	<filter-mapping>
		<filter-name>equinoxbridgefilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- <servlet>
		<servlet-name>default</servlet-name>
		<servlet-class>org.eclipse.jetty.servlet.DefaultServlet    </servlet-class>
	</servlet> -->
	<!-- it seems we just need a fake servlet
	     so the container is adding the request path
	     information -->
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>/*</url-pattern>
	</servlet-mapping>


	<!-- <servlet id="bridgeservlet"> <servlet-name>equinoxbridgeservlet</servlet-name> 
		<display-name>Equinox Bridge Servlet</display-name> <description>Equinox 
		Bridge Servlet</description> <servlet-class>org.eclipse.equinox.servletbridge.BridgeServlet</servlet-class> 
		<load-on-startup>0</load-on-startup> </servlet> <servlet-mapping> <servlet-name>equinoxbridgeservlet</servlet-name> 
		<url-pattern>/*</url-pattern> </servlet-mapping> -->
</web-app>
